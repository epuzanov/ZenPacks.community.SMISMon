<?xml version="1.0"?>
<objects>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'Device') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/Device' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Basic template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
Products.ZenModel.Device
</property>
<tomanycont id='datasources'>
<object id='ComputerSystem' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='TotalStorageSpace' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='UsedStorageSpace' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['ComputerSystem_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_Device
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
<tomanycont id='graphDefs'>
<object id='Utilization' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
bytes
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
True
</property>
<property type="int" id="miny" mode="w" >
0
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
2
</property>
<tomanycont id='graphPoints'>
<object id='TotalStorageSpace' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property type="string" id="color" mode="w" >
000000
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Total
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1073741824,*
</property>
<property type="string" id="dpName" mode="w" >
ComputerSystem_TotalStorageSpace
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='UsedStorageSpace' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Used
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1073741824,*
</property>
<property type="string" id="dpName" mode="w" >
ComputerSystem_UsedStorageSpace
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_DiskDrive') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_DiskDrive' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
DiskDrive performance template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_DiskDrive
</property>
<tomanycont id='datasources'>
<object id='DiskDrive' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
<object id='StatisticalData' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT KBytesRead,KBytesWritten,ReadIOs,WriteIOs FROM ${here/cimStatInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='KBytesRead' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='KBytesWritten' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='ReadIOs' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='WriteIOs' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['DiskDrive_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_DiskDrive
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
<tomanycont id='graphDefs'>
<object id='IO Bytes' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
bytes/sec
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
True
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<tomanycont id='graphPoints'>
<object id='KBytesRead' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Read
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1024,*
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_KBytesRead
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='KBytesWritten' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Write
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1024,*
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_KBytesWritten
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
<object id='IO Requests' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
requests/sec
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
1
</property>
<tomanycont id='graphPoints'>
<object id='ReadIOs' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Read
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_ReadIOs
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='WriteIOs' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Write
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_WriteIOs
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_EnclosureChassis') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_EnclosureChassis' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Disk Enclosure template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_EnclosureChassis
</property>
<tomanycont id='datasources'>
<object id='EnclosureChassis' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['EnclosureChassis_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_EnclosureChassis
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_NetworkPort') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_NetworkPort' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Port template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_NetworkPort
</property>
<tomanycont id='datasources'>
<object id='NetworkPort' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['NetworkPort_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_NetworkPort
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_ReplicationGroup') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_ReplicationGroup' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Replication Group template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_ReplicationGroup
</property>
<tomanycont id='datasources'>
<object id='ReplicationGroup' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['ReplicationGroup_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_ReplicationGroup
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_StoragePool') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_StoragePool' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Disk Group performance template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_StoragePool
</property>
<tomanycont id='datasources'>
<object id='StoragePool' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT OperationalStatus,RemainingManagedSpace,TotalManagedSpace FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='RemainingManagedSpace' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='TotalManagedSpace' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['StoragePool_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_StoragePool
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
<tomanycont id='graphDefs'>
<object id='Usage' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
bytes
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
True
</property>
<property type="int" id="miny" mode="w" >
0
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<tomanycont id='graphPoints'>
<object id='RemainingManagedSpace' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Used
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
TotalManagedSpace,-,-1,*
</property>
<property type="string" id="dpName" mode="w" >
StoragePool_RemainingManagedSpace
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='TotalManagedSpace' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Total
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
StoragePool_TotalManagedSpace
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Devices', 'Storage', 'SMI-S', 'rrdTemplates', 'SNIA_StorageVolume') -->
<object id='/zport/dmd/Devices/Storage/SMI-S/rrdTemplates/SNIA_StorageVolume' module='Products.ZenModel.RRDTemplate' class='RRDTemplate'>
<property type="text" id="description" mode="w" >
Virtual Disk performance template for SMI-S Storage
</property>
<property type="string" id="targetPythonClass" mode="w" >
ZenPacks.community.SMISMon.SNIA_StorageVolume
</property>
<tomanycont id='datasources'>
<object id='StatisticalData' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT KBytesRead,KBytesWritten,ReadIOs,WriteIOs FROM ${here/cimStatInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='KBytesRead' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='KBytesWritten' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='ReadIOs' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='WriteIOs' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
DERIVE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
<object id='StorageVolume' module='ZenPacks.community.SQLDataSource.datasources.SQLDataSource' class='SQLDataSource'>
<property select_variable="sourcetypes" type="selection" id="sourcetype" mode="w" >
SQL
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="int" id="severity" mode="w" >
3
</property>
<property type="int" id="cycletime" mode="w" >
300
</property>
<property type="string" id="cs" mode="w" >
${here/zSNIAConnectionString},user='${here/zWinUser}',password='${here/zWinPassword}'
</property>
<property type="string" id="sql" mode="w" >
SELECT NumberOfBlocks,OperationalStatus FROM ${here/cimInstanceName}
</property>
<tomanycont id='datapoints'>
<object id='NumberOfBlocks' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
<object id='OperationalStatus' module='Products.ZenModel.RRDDataPoint' class='RRDDataPoint'>
<property select_variable="rrdtypes" type="selection" id="rrdtype" mode="w" >
GAUGE
</property>
<property type="boolean" id="isrow" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
</tomanycont>
<tomanycont id='thresholds'>
<object id='OperationalStatus' module='Products.ZenModel.MinMaxThreshold' class='MinMaxThreshold'>
<property type="lines" id="dsnames" mode="w" >
['StorageVolume_OperationalStatus']
</property>
<property type="boolean" id="enabled" mode="w" >
True
</property>
<property type="string" id="minval" mode="w" >
2
</property>
<property type="string" id="maxval" mode="w" >
2
</property>
<property type="string" id="eventClass" mode="w" >
/Status/SNIA_StorageVolume
</property>
<property type="int" id="severity" mode="w" >
4
</property>
<property type="int" id="escalateCount" mode="w" >
0
</property>
</object>
</tomanycont>
<tomanycont id='graphDefs'>
<object id='IO Bytes' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
bytes/sec
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
True
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
1
</property>
<tomanycont id='graphPoints'>
<object id='KBytesRead' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Read
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1024,*
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_KBytesRead
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='KBytesWritten' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Write
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
1024,*
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_KBytesWritten
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
<object id='IO Requests' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
requests/sec
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
-1
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<property type="long" id="sequence" mode="w" >
2
</property>
<tomanycont id='graphPoints'>
<object id='ReadIOs' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
AREA
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Read
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_ReadIOs
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
<object id='WriteIOs' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property type="long" id="sequence" mode="w" >
1
</property>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Write
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="dpName" mode="w" >
StatisticalData_WriteIOs
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
<object id='Size' module='Products.ZenModel.GraphDefinition' class='GraphDefinition'>
<property type="int" id="height" mode="w" >
100
</property>
<property type="int" id="width" mode="w" >
500
</property>
<property type="string" id="units" mode="w" >
bytes
</property>
<property type="boolean" id="log" mode="w" >
False
</property>
<property type="boolean" id="base" mode="w" >
False
</property>
<property type="int" id="miny" mode="w" >
0
</property>
<property type="int" id="maxy" mode="w" >
-1
</property>
<property type="boolean" id="hasSummary" mode="w" >
True
</property>
<tomanycont id='graphPoints'>
<object id='NumberOfBlocks' module='Products.ZenModel.DataPointGraphPoint' class='DataPointGraphPoint'>
<property select_variable="lineTypes" type="selection" id="lineType" mode="w" >
LINE
</property>
<property type="long" id="lineWidth" mode="w" >
1
</property>
<property type="boolean" id="stacked" mode="w" >
False
</property>
<property type="string" id="format" mode="w" >
%5.2lf%s
</property>
<property type="string" id="legend" mode="w" >
Size
</property>
<property type="long" id="limit" mode="w" >
-1
</property>
<property type="string" id="rpn" mode="w" >
${here/blockSize},*
</property>
<property type="string" id="dpName" mode="w" >
StorageVolume_NumberOfBlocks
</property>
<property type="string" id="cFunc" mode="w" >
AVERAGE
</property>
</object>
</tomanycont>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_Device') -->
<object id='/zport/dmd/Events/Status/SNIA_Device' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_DiskDrive') -->
<object id='/zport/dmd/Events/Status/SNIA_DiskDrive' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.harddisks._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.harddisks._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_EnclosureChassis') -->
<object id='/zport/dmd/Events/Status/SNIA_EnclosureChassis' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.enclosures._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.enclosures._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_NetworkPort') -->
<object id='/zport/dmd/Events/Status/SNIA_NetworkPort' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.ports._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.ports._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_ReplicationGroup') -->
<object id='/zport/dmd/Events/Status/SNIA_ReplicationGroup' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.collections._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.collections._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_StoragePool') -->
<object id='/zport/dmd/Events/Status/SNIA_StoragePool' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.storagepools._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.storagepools._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_StorageProcessor') -->
<object id='/zport/dmd/Events/Status/SNIA_StorageProcessor' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.cards._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.hw.cards._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'SNIA_StorageVolume') -->
<object id='/zport/dmd/Events/Status/SNIA_StorageVolume' module='Products.ZenEvents.EventClass' class='EventClass'>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.virtualdisks._getOb(evt.component).state = state
    txnCommit()
</property>
<property type="text" id="transform" mode="w" >
status = float(evt.message.split()[-1]) 
state = {0:'Unknown',1:'Other',2:'OK',3:'Degraded',4:'Stressed',5:'Predictive Failure',6:'Error',7:'Non-Recoverable Error',8:'Starting',9:'Stopping',10:'Stopped',11:'In Service',12:'No Contact',13:'Lost Communication',14:'Aborted',15:'Dormant',16:'Supporting Entity in Error',17:'Completed',18:'Power Mode'}.get(status, 'Unknown')
evt.summary = "%s (%s)"%(evt.message, state)
evt.severity = {0:3,1:3,2:0,3:4,4:3,5:3,6:4,7:5,8:2,9:3,10:4,11:2,12:3,13:4,14:4,15:3,16:4,17:0,18:3}.get(status, 3)
if evt.firstTime == evt.lastTime:
    device.os.virtualdisks._getOb(evt.component).state = state
    txnCommit()
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Reports', 'Device Reports', 'SMI-S Reports', 'Hard Disks') -->
<object id='/zport/dmd/Reports/Device Reports/SMI-S Reports/Hard Disks' module='Products.ZenModel.Report' class='Report'>
</object>
<!-- ('', 'zport', 'dmd', 'Reports', 'Device Reports', 'SMI-S Reports', 'Storage Controllers') -->
<object id='/zport/dmd/Reports/Device Reports/SMI-S Reports/Storage Controllers' module='Products.ZenModel.Report' class='Report'>
</object>
</objects>
